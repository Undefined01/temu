/*
 * This source file was generated by the Gradle 'init' task
 */
package website.lihan.temu;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import org.graalvm.polyglot.Context;
import org.graalvm.polyglot.PolyglotException;
import org.graalvm.polyglot.Source;
import org.graalvm.polyglot.io.ByteSequence;

public class App {
  private static final String LANG = "rv64";
  private static final boolean INTERACTIVE = false;

  public static void main(String[] args) throws IOException {
    Source source;
    Map<String, String> options = new HashMap<>();
    String file = null;
    for (String arg : args) {
      if (parseOption(options, arg)) {
        continue;
      } else {
        if (file == null) {
          file = arg;
        }
      }
    }

    if (file == null) {
      // @formatter:off
      source =
          Source.newBuilder(LANG, new InputStreamReader(System.in), "<stdin>")
              .interactive(INTERACTIVE)
              .build();
      // @formatter:on
    } else {
      var bytes = Files.readAllBytes(Path.of(file));
      source = Source.newBuilder(LANG, ByteSequence.create(bytes), file).interactive(INTERACTIVE).build();
    }

    System.exit(executeSource(source, System.in, System.out, options));
  }

  private static int executeSource(
      Source source,
      InputStream in,
      PrintStream out,
      Map<String, String> options) {
    Context context;
    PrintStream err = System.err;
    try {
      context =
          Context.newBuilder(LANG).in(in).out(out).options(options).allowAllAccess(true).build();
    } catch (IllegalArgumentException e) {
      err.println(e.getMessage());
      return 1;
    }

    try {
      context.eval(source);
      return 0;
    } catch (PolyglotException ex) {
      ex.printStackTrace();
      return 1;
    } finally {
      context.close();
    }
  }

  private static boolean parseOption(Map<String, String> options, String arg) {
    if (arg.length() <= 2 || !arg.startsWith("--")) {
      return false;
    }
    int eqIdx = arg.indexOf('=');
    String key;
    String value;
    if (eqIdx < 0) {
      key = arg.substring(2);
      value = null;
    } else {
      key = arg.substring(2, eqIdx);
      value = arg.substring(eqIdx + 1);
    }

    if (value == null) {
      value = "true";
    }
    options.put(key, value);
    return true;
  }
}
